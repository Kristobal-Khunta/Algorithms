# Витя работает недалеко от одной из станций кольцевой линии Московского метро,
# а живет рядом с другой станцией той же линии.
# Требуется выяснить, мимо какого наименьшего количества промежуточных станций
# необходимо проехать Вите по кольцу, чтобы добраться с работы домой.

# Формат ввода
# Станции пронумерованы подряд натуральными числами 1, 2, 3, …, N
# (1-я станция – соседняя с N-й), N не превосходит 100.

# Вводятся три числа: сначала N – общее количество станций кольцевой линии,
# а затем i и j – номера станции, на которой Витя садится, и станции,
# на которой он должен выйти. Числа i и j не совпадают.
# Все числа разделены пробелом.

# Формат вывода
# Требуется выдать минимальное количество промежуточных станций 
# (не считая станции посадки и высадки), которые необходимо проехать Вите.


def find_circle_diff(
    n, start, end,
):
    if end > start:
        v1 = end - start
        v2 = (n - end) + start

    else:
        v1 = start - end
        v2 = (n - start) + end
    v1 -= 1
    v2 -= 1
    return min(abs(v1), abs(v2))


assert find_circle_diff(10, 1, 9) == 1
assert find_circle_diff(10, 9, 1) == 1
assert find_circle_diff(100, 6, 5) == 0
assert find_circle_diff(100, 5, 6) == 0

if __name__ == "__main__":
    n, start, end = tuple(map(int, input().split()))
    print(find_circle_diff(n, start, end,))

