# Бригада скорой помощи выехала по вызову в один из отделенных районов.
# К сожалению, когда диспетчер получил вызов, он успел записать только адрес дома
#  и номер квартиры K1, а затем связь прервалась. Однако он вспомнил, что по этому
#   же адресу дома некоторое время назад скорая помощь выезжала в квартиру K2,
#   которая расположена в подъезда P2 на этаже N2. Известно, что в доме M этажей
#   и количество квартир на каждой лестничной площадке одинаково. Напишите программу,
#   которая вычилсяет номер подъезда P1 и номер этажа N1 квартиры K1.
# 41 квартира во 2ом подъезде на 4 этаже, всего этажей 10(M)
# n - число квартир на этаже
# L*M*(P2-1)+(N2-1)*L+S3
# S3 = SS//N2


# [In reply to Ramil Nazmeev]
# объясняю
# пусть n - количество квартир на этаже
# тогда в одном подъезде m * n квартир
# k2 = (p2 - 1) * m * n + (n2 - 1) * n + альфа
# (p2 - 1) * m * n - это сколько у нас квартир в подъездах до нашего
# (n2 - 1) * n - это сколько квартир в нашем подъезде в этажах ниже нашего
# альфа - число меньшее чем n обозначающее (от 1 до n вроде)

# Квартира k2 находится где-то между первой и последней на этаже включительно.
# Из этого условия можно записать неравенство для k2 с неизвестным x - количеством квартир на этаже,
# после чего преобразовать его в неравенство для x.
#  Дальше для каждого возможного x из этого неравенства считаем,
#  какой этаж и какой подъезд получается для квартиры k1.
#   Если получаются одни и те же значения для всех вариантов x,

#   то мы нашли непротиворечивое решение, если подъезд или этаж получаются разные для разных x,
#    то соответственно зануляем их. Ну и несколько краевых случаев нужно дополнительно обработать.


K1, M, K2, P2, N2 = map(int, input().split())
c = ((P2 - 1) * M + (N2 - 1) + 1)
#for val in [K1, M, K2, P2, N2]:
#   if val<=0:
#        print( -1 -1 )
if ((P2 - 1) * M + (N2 - 1)):
    

x_min = int(x_min) + 1
x_max = (K2 - 1) / ((P2 - 1) * M + (N2 - 1))
x_max = int(x_max)

for x in range(x_min, (x_max + 1)):
    # print(f"current x ", x)
    P1_pred = K1 // (M * x)
    P1 = P1_pred + 1
    # print(f"K1//(M * x), {K1}//({M} * {x}),= {K1//(M * x)}")
    n_in_N = K1 - (P1_pred * M * x)
    N1 = n_in_N // x + 1
    print(x, P1, N1)

