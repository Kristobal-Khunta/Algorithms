# Студенты одного из вузов спроектировали робота для частичной автоматизации
# процесса сборки авиационного двигателя.

# В процессе сборки двигателя могут встречаться операции 26 типов,
# которые обозначаются строчными буквами латинского алфавита.
# Процесс сборки состоит из N операций.

# Предполагается использовать робота один раз для выполнения части
# подряд идущих операций из процесса сборки.

# Память робота состоит из K ячеек, каждая из которых содержит одну операцию.
# Операции выполняются последовательно, начиная с первой, в том порядке, в котором они расположены в памяти. Выполнив последнюю из них, робот продолжает работу с первой. Робота можно остановить после любой операции. Использование робота экономически целесообразно, если он выполнит хотя бы K + 1 операцию.

# Требуется написать программу, которая по заданному процессу сборки определит
# количество экономически целесообразных способов использования робота.

# Формат ввода
# В первой строке входного файла записано число K > 0 — количество операций,
# которые можно записать в память робота.

# Вторая строка состоит из N > K строчных латинских букв,
# обозначающих операции — процесс сборки двигателя.
# Операции одного и того же типа обозначаются одной и той же буквой. N ≤ 200000

# Формат вывода
# Выходной файл должен содержать единственное целое число — количество
# экономически целесообразных способов использования робота.


def robo_circle_dirty(seq, k):
    l_idx = 0
    r_idx = k
    count = 0
    while r_idx < len(seq):
        idx_add = 0
        while (r_idx + idx_add) < len(seq) and seq[l_idx + idx_add] == seq[
            r_idx + idx_add
        ]:
            idx_add += 1
        for i in range(1, idx_add + 1):
            count += i
        if idx_add == 0:
            idx_add = 1
        r_idx += idx_add
        l_idx += idx_add
    return count


def robo_circle(seq, k):
    ans = 0
    prevlen = 0
    for i in range(k, len(seq)):
        if seq[i] == seq[i - k]:
            prevlen += 1
            ans += prevlen
        else:
            prevlen = 0
    return ans


assert robo_circle("zabacabab", 2) == 5
assert robo_circle("abcabcabc", 3) == 21
assert robo_circle("abcabcabcbb", 3) == 22
assert robo_circle("abc", 2) == 0


def main():
    k = int(input())
    seq = input()
    print(robo_circle(seq, k))


if __name__ == "__main__":
    main()

