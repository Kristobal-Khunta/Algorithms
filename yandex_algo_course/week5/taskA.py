# Глеб обожает шоппинг. Как-то раз он загорелся идеей подобрать себе майку и штаны так,
#  чтобы выглядеть в них максимально стильно. В понимании Глеба стильность одежды тем больше,
#   чем меньше разница в цвете элементов его одежды.

# В наличии имеется N (1 ≤ N ≤ 100 000) маек и M (1 ≤ M ≤ 100 000) штанов,
#  про каждый элемент известен его цвет (целое число от 1 до 10 000 000). Помогите Глебу выбрать одну майку и одни штаны так, чтобы разница в их цвете была как можно меньше.

# Формат ввода
# Сначала вводится информация о майках: в первой строке целое число N (1 ≤ N ≤ 100 000) и
# во второй N целых чисел от 1 до 10 000 000 — цвета имеющихся в наличии маек.
# Гарантируется, что номера цветов идут в возрастающем порядке (в частности, цвета никаких двух маек не совпадают).

# Далее в том же формате идёт описание штанов: их количество M (1 ≤ M ≤ 100 000) и
#  в следующей строке M целых чисел от 1 до 10 000 000 в возрастающем порядке — цвета штанов.

# Формат вывода
# Выведите пару неотрицательных чисел — цвет майки и цвет штанов,
#  которые следует выбрать Глебу. Если вариантов выбора несколько,
#   выведите любой из них.


def find_minimum_diff(arr1, arr2):
    """
    https://contest.yandex.ru/contest/27794/problems/A/
    Используем два указателя, каждый указывает на свой массив.
    Принцип аналогичный сортировке двух отсортированных массивов,
    только тут необходимо при сдвиге указателя проверить условие на минимальную разность.
    если первый казатель указывает на большее число,
    то сдвигаем меньшее так как сдвиг большего увеличит разницу, а нам необходимо минимальное значение.
    Example:
    
    arr1 = 3 10 20 1000 10000
    arr2 = 1 2 4 5 19 20 22
    В таком подходе мы сравниваем пары (3,1), (3,2),(3,4)(10,4),(10,5)(10,19)(20,19)  и т.д.
    В идеале можно уменьшеить число сравнений,учитывая, что нас интересуют только ситуации,
    когда мы меняем поинтер который будем сдвигать, когда знак между сравниваемыми значениями изменяется
    Например, отсортированный массив будет выглядеть так:
    1 2 [3] 4 5 [10] 19 20 [20] 22 [1000] [10000]
    И сравнивать необходимо только: (2,[3]) ([3],4) (5,[10]),([10],19) (20,[20]), ([20],22),(22,[1000])
    https://www.geeksforgeeks.org/smallest-difference-pair-values-two-unsorted-arrays/
    """
    min_diff = abs(arr1[0] - arr2[0])
    if min_diff == 0:
        return arr1[0], arr2[0]
    l_idx = 0
    r_idx = 0
    result = (arr1[0], arr2[0])
    while l_idx < len(arr1) and r_idx < len(arr2):
        l_val = arr1[l_idx]
        r_val = arr2[r_idx]

        cur_diff = abs(l_val - r_val)
        if cur_diff < min_diff:
            result = (l_val, r_val)
            min_diff = cur_diff
        if l_val > r_val:
            r_idx += 1
        else:
            l_idx += 1
    return result


def main():
    n = int(input())
    arr1 = list(map(int, input().split()))
    m = int(input())
    arr2 = list(map(int, input().split()))
    result = find_minimum_diff(arr1, arr2)
    print(*result)


if __name__ == "__main__":
    main()
