# Александр недавно увлекся горным туризмом.
# Ему уже надоело покорять отдельные горные пики,
# и он собирается покорить самую настоящую горную цепь!

# Напомним, что Александр живет в плоском мире.
# Горная цепь состоит из отрезков, соединяющих точки на плоскости,
# каждая из которых находится строго правее предыдущей
# (x-координата следующей точки больше, чем у предыдущей).
# Трассой на горной цепи называется её часть между двумя фиксированными концами отрезков.

# Участок, на котором при движении по трассе координата y (высота)
# всегда возрастает, называется подъемом,
# величиной подъема называется разность высот между начальной и конечной точками участка.

# Туристическая компания предлагает на выбор несколько трасс на одной горной цепи.
# Александр из-за финансовых трудностей может выбрать для поездки только одну из этих трасс.
# Вы решили помочь ему с выбором. Александру важно для каждой трассы
# определить суммарную высоту подъемов на ней. Обратите внимание,
# что трасса может идти как слева-направо, так и справа-налево.

# Формат ввода
# В первой строке входного файла содержится единственное число N — количество точек ломаной,
# задающей горную цепь (1 ≤ N ≤ 30 000). Далее в N строках содержатся описания точек,
# каждое из которых состоит из двух целых чисел, xi и yi (1 ≤ xi, yi ≤ 30 000).

# В следующей строке находится число M — количество трасс (1 ≤ M ≤ 30 000).

# Далее в M строках содержатся описания трасс. Каждое описание представляет собой два целых числа,
# si и fi, они обозначают номера вершин начала и конца трассы, соответственно (1 ≤ si ≤ N, 1 ≤ fi ≤ N).
# Начало и конец трассы могут совпадать.

# Гарантируется, что во входном файле задана именно горная цепь.


def increment_prefix_sum(x, y):
    increment_dict = {x[0]: 0}
    decremetn_dict = {x[0]: 0}
    inc_sum = 0
    dec_sum = 0
    for i in range(1, len(x)):
        diff = y[i] - y[i - 1]
        inc_sum += max(0, diff)
        increment_dict[x[i]] = inc_sum
        dec_sum += min(diff, 0)
        decremetn_dict[x[i]] = dec_sum
    return increment_dict, decremetn_dict


def inc_decr_prefix_array(x, y):
    """
    inc_array -  массив подсчитывающий положительные перепады высоты при движении
    слева - направо.
    decr_array - мононно-убывающий массив, подсчитывающий падения высоты при движении
    слева- направо, что эквивалентно подъему высоты при движении справа-налево.
    
    """
    inc_array = [0] * (len(x) + 1)
    decr_array = [0] * (len(x) + 1)
    for i in range(1, len(x)):
        diff = y[i] - y[i - 1]
        inc_array[i] = inc_array[i - 1] + max(0, diff)
        decr_array[i] = decr_array[i - 1] + min(0, diff)
    return inc_array, decr_array


def main():
    N = int(input())
    mounts_x = []
    mounts_y = []
    for _ in range(N):
        t = tuple(map(int, input().split()))
        mounts_x.append(t[0])
        mounts_y.append(t[1])

    trasses = []
    M = int(input())
    for _ in range(M):
        t = tuple(map(int, input().split()))
        trasses.append(t)

    rises_left, rises_right = inc_decr_prefix_array(mounts_x, mounts_y)

    for (x_start, x_end) in trasses:
        if x_end > x_start:
            # вычтем 1 из индекса, так как в массиве точки начинаются с 0, а в запросе с 1.
            print(rises_left[x_end - 1] - rises_left[x_start - 1])
        else:
            print(rises_right[x_end - 1] - rises_right[x_start - 1])


if __name__ == "__main__":
    main()
